Railway Database Setup Guide

1. Create a Railway project
   - Sign in at https://railway.app and create a new project.
   - Choose the PostgreSQL template to provision a database service.

2. Note the connection details
   - In the Railway dashboard, open the PostgreSQL service.
   - Copy the `DATABASE_URL` or individual host, user, password, and database values.

3. Configure environment variables for the app
   - In your Railway project, add an environment variable named `DATABASE_URL` with the value from step 2.
   - Redeploy the project so the variable is available to the server.

4. Create a users table
   - Connect to the database using the builtâ€‘in SQL editor or any PostgreSQL client.
   - Run:
     ```sql
     CREATE TABLE users (
       id SERIAL PRIMARY KEY,
       username TEXT UNIQUE NOT NULL,
       password TEXT NOT NULL
     );
     ```

5. Implement server routes
   - Add `/auth/signup` and `/auth/login` POST routes in `index.js`.
   - Use the `pg` npm package to connect to the database with `process.env.DATABASE_URL`.
   - On signup, hash the password (for example with `bcrypt`) and insert a new row into `users`.
   - On login, verify the password and respond with success or failure.

6. Hook up the frontend
   - In `static/assets/scripts/login.js`, replace the localStorage logic with `fetch` calls to `/auth/signup` and `/auth/login`.
   - On successful responses, set `localStorage.registered = 'true'` and redirect the user.

7. Deploy
   - Commit your changes and push to the Railway GitHub repository or deploy directly from the dashboard.
   - The environment variable will allow the server to reach the database at runtime.

Following these steps will provide a fully functional signup/login system backed by Railway.
